trigger:
- release

pr: none

pool:
  vmImage: "ubuntu-16.04"

variables:
- group: PGP_VAR_GROUP
- group: SONATYPE_VAR_GROUP
- group: GIT_VAR_GROUP 
- name: VERSION

steps:
  # Checks if the release notes file is populated. Exits if it is not.
  - bash: |
      if [ -s RELEASE_NOTES.md ]
      then
            echo "RELEASE_NOTES.md has data, proceeding to next step."
      else
            echo "Your RELEASE_NOTES.md file is empty. Please provide release notes before creating a release."
            exit 1
      fi

  # This task pulls the <version> value from the pom.xml file, so we can set it to the variable $version
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        [xml]$pomXml = Get-Content .\pom.xml
        # version
        Write-Host $pomXml.project.version
        $version=$pomXml.project.version
        Write-Host "##vso[task.setvariable variable=version]$version"

  # For creating the snapshot release with maven, we need to build a fake settings.xml for it to read from.
  # This is done for the master branch merges only.
  - bash: |
      cat >$(System.DefaultWorkingDirectory)/settings.xml <<EOL
      <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                                    https://maven.apache.org/xsd/settings-1.0.0.xsd">
        <servers>
          <server>
            <id>github</id>
            <username>$(GIT_USER_NAME)</username>
            <password>$(GIT_PAT)</password>
          </server>
          <server>
            <id>ossrh</id>
            <username>$(SONATYPE_USER)</username>
            <password>$(SONATYPE_PASS)</password>
          </server>
          <server>
            <id>github-releases</id>
            <username>markiantorno</username>
            <password>$(GIT_PACKAGE_PAT)</password>
          </server>
        </servers>
        <profiles>
          <profile>
            <id>release</id>
            <activation>
              <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
              <gpg.keyname>$(PGP_KEYNAME)</gpg.keyname>
            </properties>
          </profile>
        </profiles>
      </settings>
      EOL
    displayName: 'Create .mvn/settings.xml'

  # Runs 'mvn package'
  - task: Maven@3
    inputs:
      mavenPomFile: 'pom.xml'
      mavenOptions: '-Xmx3072m'
      options: '--settings $(System.DefaultWorkingDirectory)/settings.xml'
      javaHomeOption: 'JDKVersion'
      jdkVersionOption: '1.8'
      jdkArchitectureOption: 'x64'
      publishJUnitResults: true
      testResultsFiles: '**/surefire-reports/TEST-*.xml'
      goals: 'package'

  # Prints out the build version, for debugging purposes
  - bash: echo Pulled version from pom.xml => $(version)

  # Copies the generated *.jar file to the staging directory.
  # This is done for release versions only.
  - task: CopyFiles@2
    displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
    inputs:
      SourceFolder: '$(system.defaultworkingdirectory)'
      Contents: "$(System.DefaultWorkingDirectory)/target/fhir-test-cases-$(version).jar"
      TargetFolder: '$(build.artifactstagingdirectory)'

  # Azure pipelines cannot pass variables between pipelines, but it can pass files, so we
  # pass the build id (ex: 1.1.13-SNAPSHOT) as a string in a file. 
  # This is used in the release pipeline, so we create it here.
  # This is only done for the release branch.
  - bash: |
      echo $(version)
      VERSION=$(version)
      echo "$VERSION" > $(System.DefaultWorkingDirectory)/VERSION

  # Copies the VERSION file containing the build id (ex: 1.1.13-SNAPSHOT) to the staging directory
  # This is done for release versions only.
  - task: CopyFiles@2
    displayName: 'Copy Files to: $(build.artifactstagingdirectory)'
    inputs:
      SourceFolder: '$(System.Defaultworkingdirectory)'
      Contents: "$(System.DefaultWorkingDirectory)/VERSION"
      TargetFolder: '$(build.artifactstagingdirectory)'

  # Publishes the files we've moved into the staging directory, so they can be accessed by the 
  # release pipeline. You will notice that we only do this for the ubuntu build, as doing it 
  # for each of the three release pipelines will cause conflicts.
  # This is done for release versions only.
  - task: PublishBuildArtifacts@1
    displayName: 'Publish Build Artifacts'
    inputs:
      PathtoPublish: '$(build.artifactstagingdirectory)'