trigger: none
pr: none

schedules:
- cron: "0 0 * * *"
  displayName: "nightly-xig-build-process"
  branches:
    include: 
    - master
  always: true # whether to always run the pipeline or only if there have been source code changes since the last successful scheduled run. The default is false.

pool:
  vmImage: ubuntu-latest

variables:
- group: XIG_VARIABLE_GROUP
- name: XIG_CACHE_FOLDER
  value: $(Pipeline.Workspace)/xig-cache
- name: XIG_DB_FILE
  value: $(Pipeline.Workspace)/xig.db

jobs:
- job: xig-step-1
  timeoutInMinutes: 70
  steps:
  - task: Bash@3
    displayName: 'Download publisher'
    inputs:
      targetType: 'inline'
      script: 'wget https://github.com/HL7/fhir-ig-publisher/releases/latest/download/publisher.jar'

  - task: Bash@3
    displayName: 'Make output database'
    inputs:
      targetType: 'inline'
      script: 'touch $(XIG_DB_FILE)'

  - task: Bash@3
    displayName: 'Make cache dir'
    inputs:
      targetType: 'inline'
      script: 'mkdir $(XIG_CACHE_FOLDER)'

  - task: Bash@3
    displayName: 'Make dummy file'
    inputs:
      targetType: 'inline'
      script: 'echo "Why hello there" > $(XIG_DB_FILE)'

  - task: Bash@3
    displayName: 'Run publisher with xig param'
    enabled: false
    inputs:
      targetType: 'inline'
      script: 'java -Xmx7168m -jar ./publisher.jar -xig $(XIG_DB_FILE) -xig-cache $(XIG_CACHE_FOLDER) -xig-step 1'

  - publish: $(XIG_CACHE_FOLDER)
    artifact: xig-step-1-cache
  - publish: $(XIG_DB_FILE)
    artifact: xig-step-1-db

- job: xig-step-2
  dependsOn: xig-step-1
  steps:
  - download: current
    artifact: xig-step-1-cache
  - download: current
    artifact: xig-step-1-db

  - task: Bash@3
    displayName: 'Run publisher with xig param'
    inputs:
      targetType: 'inline'
      script: 'java -Xmx7168m -jar ./publisher.jar -xig $(XIG_DB_FILE) -xig-cache $(XIG_CACHE_FOLDER) -xig-step 2'

  - publish: $(XIG_CACHE_FOLDER)
    artifact: xig-step-2-cache
  - publish: $(XIG_DB_FILE)
    artifact: xig-step-2-db

- job: xig-step-3
  dependsOn: xig-step-2
  steps:
    - download: current
      artifact: xig-step-2-cache
    - download: current
      artifact: xig-step-2-db

    - task: Bash@3
      displayName: 'Run publisher with xig param'
      inputs:
        targetType: 'inline'
        script: 'java -Xmx7168m -jar ./publisher.jar -xig $(XIG_DB_FILE) -xig-cache $(XIG_CACHE_FOLDER) -xig-step 3'

    - publish: $(XIG_DB_FILE)
      artifact: xig-step-3-db

- job: transfer-db-to-remote
  condition: false
  dependsOn:
  - xig-step-1
  - xig-step-2
  - xig-step-3
  steps:
  - download: current
    artifact: xig-step-3-db

  - task: DownloadSecureFile@1
    inputs:
      secureFile: 'xig.private.key' 

  # This step includes chmod to the private key to avoid ssh complaining about permissions.
  - task: Bash@3
    displayName: 'Clean previous results on remote'
    retryCountOnTaskFailure: 5
    inputs:
      targetType: 'inline'
      script: |
        chmod 400 $(Agent.TempDirectory)/xig.private.key
        ssh -o "StrictHostKeyChecking=no" -i $(Agent.TempDirectory)/xig.private.key $(XIG_USER)@$(XIG_SERVER) 'if [ -d "$(XIG_TARGET_DIRECTORY)" ]; then find $(XIG_TARGET_DIRECTORY) -name "*" -delete; fi && mkdir $(XIG_TARGET_DIRECTORY)'

  - task: Bash@3
    displayName: 'Tar results'

    inputs:
      targetType: 'inline'
      script: |
        tar -C ./xig_output -zcvf xig-www.tar.gz .

  - task: Bash@3
    displayName: 'Copy tar to remote'
    retryCountOnTaskFailure: 5
    inputs:
      targetType: 'inline'
      script: |
        scp -o "StrictHostKeyChecking=no" -i $(Agent.TempDirectory)/xig.private.key xig-www.tar.gz $(XIG_USER)@$(XIG_SERVER):$(XIG_TARGET_DIRECTORY)/

  - task: Bash@3
    displayName: 'Decompress tar on remote'
    retryCountOnTaskFailure: 5
    inputs:
      targetType: 'inline'
      script: |
        ssh -o "StrictHostKeyChecking=no" -i $(Agent.TempDirectory)/xig.private.key $(XIG_USER)@$(XIG_SERVER) 'tar -zxvf $(XIG_TARGET_DIRECTORY)/xig-www.tar.gz -C $(XIG_TARGET_DIRECTORY)'
